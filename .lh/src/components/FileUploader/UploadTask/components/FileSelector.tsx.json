{
    "sourceFile": "src/components/FileUploader/UploadTask/components/FileSelector.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1748432648803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748432656675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,11 @@\n         })\r\n       );\r\n       message.success(\"所有文件已处理并存入本地数据库！\");\r\n     } catch (err) {\r\n-      message.error(\"处理文件时出错！\");\r\n+      message.error(\r\n+        \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n+      );\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1748432962144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import { Button, Upload, message } from \"antd\";\r\n import React, { useState } from \"react\";\r\n import type { UploadFile, UploadProps } from \"antd/es/upload/interface\";\r\n+import { getFileMeta, saveFileMeta } from \"../services/dbService\";\r\n \r\n import { UploadOutlined } from \"@ant-design/icons\";\r\n import { fileToArrayBufferWithWorker } from \"../services/fileWorkerService\";\r\n-import { saveFileMeta } from \"../services/dbService\";\r\n \r\n interface FileSelectorProps {\r\n   accept?: string;\r\n   multiple?: boolean;\r\n@@ -26,64 +26,55 @@\n     fileList,\r\n     beforeUpload: () => {\r\n       return false;\r\n     },\r\n-    onChange: ({ fileList: newFileList }) => {\r\n+    onChange: async ({ fileList: newFileList }) => {\r\n       setFileList(newFileList);\r\n       onFilesSelected?.(newFileList);\r\n+      // 自动处理文件\r\n+      setLoading(true);\r\n+      try {\r\n+        await Promise.all(\r\n+          newFileList.map(async (item) => {\r\n+            const file = item.originFileObj;\r\n+            if (!file) return;\r\n+            // 先查重\r\n+            const meta = await fileToArrayBufferWithWorker(file);\r\n+            const exists = await getFileMeta(meta.key);\r\n+            if (!exists) {\r\n+              await saveFileMeta(meta);\r\n+            }\r\n+          })\r\n+        );\r\n+        message.success(\"文件已自动处理并存入本地数据库（去重）！\");\r\n+      } catch (err) {\r\n+        message.error(\r\n+          \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n+        );\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n     },\r\n     onRemove: (file) => {\r\n       const newList = fileList.filter((item) => item.uid !== file.uid);\r\n       setFileList(newList);\r\n       onFilesSelected?.(newList);\r\n     },\r\n   };\r\n \r\n-  // 生成唯一key（文件名+时间戳+uid）\r\n-  const genKey = (file: File, uid: string) => {\r\n-    return `${file.name}_${file.lastModified}_${uid}`;\r\n-  };\r\n-\r\n-  const handleProcess = async () => {\r\n-    if (fileList.length === 0) return;\r\n-    setLoading(true);\r\n-    try {\r\n-      await Promise.all(\r\n-        fileList.map(async (item) => {\r\n-          const file = item.originFileObj;\r\n-          if (!file) return;\r\n-          const key = genKey(file, item.uid);\r\n-          const meta = await fileToArrayBufferWithWorker(file, key);\r\n-          await saveFileMeta(meta);\r\n-        })\r\n-      );\r\n-      message.success(\"所有文件已处理并存入本地数据库！\");\r\n-    } catch (err) {\r\n-      message.error(\r\n-        \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n-      );\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <div>\r\n-      <Upload.Dragger {...props} style={{ marginBottom: 16 }}>\r\n+      <Upload.Dragger\r\n+        {...props}\r\n+        style={{ marginBottom: 16 }}\r\n+        disabled={loading}\r\n+      >\r\n         <p className=\"ant-upload-drag-icon\">\r\n           <UploadOutlined />\r\n         </p>\r\n         <p className=\"ant-upload-text\">点击或拖拽文件到此区域上传</p>\r\n-        <p className=\"ant-upload-hint\">支持多选，暂不自动上传</p>\r\n+        <p className=\"ant-upload-hint\">支持多选，自动处理并去重</p>\r\n       </Upload.Dragger>\r\n-      <Button\r\n-        type=\"primary\"\r\n-        disabled={fileList.length === 0 || loading}\r\n-        loading={loading}\r\n-        onClick={handleProcess}\r\n-      >\r\n-        处理选中文件\r\n-      </Button>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748432968462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { Button, Upload, message } from \"antd\";\r\n import React, { useState } from \"react\";\r\n+import { Upload, message } from \"antd\";\r\n import type { UploadFile, UploadProps } from \"antd/es/upload/interface\";\r\n import { getFileMeta, saveFileMeta } from \"../services/dbService\";\r\n \r\n import { UploadOutlined } from \"@ant-design/icons\";\r\n"
                },
                {
                    "date": 1748433112895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,21 +2,24 @@\n import { Upload, message } from \"antd\";\r\n import type { UploadFile, UploadProps } from \"antd/es/upload/interface\";\r\n import { getFileMeta, saveFileMeta } from \"../services/dbService\";\r\n \r\n+import type { UploadFileMeta } from \"../types/file\";\r\n import { UploadOutlined } from \"@ant-design/icons\";\r\n import { fileToArrayBufferWithWorker } from \"../services/fileWorkerService\";\r\n \r\n interface FileSelectorProps {\r\n   accept?: string;\r\n   multiple?: boolean;\r\n   onFilesSelected?: (files: UploadFile[]) => void;\r\n+  onProgress?: (progress: number, current: number, total: number) => void;\r\n }\r\n \r\n const FileSelector: React.FC<FileSelectorProps> = ({\r\n   accept = \"*\",\r\n   multiple = true,\r\n   onFilesSelected,\r\n+  onProgress,\r\n }) => {\r\n   const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n   const [loading, setLoading] = useState(false);\r\n \r\n@@ -29,21 +32,27 @@\n     },\r\n     onChange: async ({ fileList: newFileList }) => {\r\n       setFileList(newFileList);\r\n       onFilesSelected?.(newFileList);\r\n-      // 自动处理文件\r\n       setLoading(true);\r\n       try {\r\n+        let current = 0;\r\n+        const total = newFileList.length;\r\n         await Promise.all(\r\n           newFileList.map(async (item) => {\r\n             const file = item.originFileObj;\r\n             if (!file) return;\r\n-            // 先查重\r\n             const meta = await fileToArrayBufferWithWorker(file);\r\n             const exists = await getFileMeta(meta.key);\r\n             if (!exists) {\r\n-              await saveFileMeta(meta);\r\n+              const metaWithTime: UploadFileMeta = {\r\n+                ...meta,\r\n+                addedAt: Date.now(),\r\n+              };\r\n+              await saveFileMeta(metaWithTime);\r\n             }\r\n+            current++;\r\n+            onProgress?.(Math.round((current / total) * 100), current, total);\r\n           })\r\n         );\r\n         message.success(\"文件已自动处理并存入本地数据库（去重）！\");\r\n       } catch (err) {\r\n@@ -51,8 +60,9 @@\n           \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n         );\r\n       } finally {\r\n         setLoading(false);\r\n+        onProgress?.(100, fileList.length, fileList.length);\r\n       }\r\n     },\r\n     onRemove: (file) => {\r\n       const newList = fileList.filter((item) => item.uid !== file.uid);\r\n"
                },
                {
                    "date": 1748433235995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n       <Upload.Dragger\r\n         {...props}\r\n         style={{ marginBottom: 16 }}\r\n         disabled={loading}\r\n+        showUploadList={false}\r\n       >\r\n         <p className=\"ant-upload-drag-icon\">\r\n           <UploadOutlined />\r\n         </p>\r\n"
                },
                {
                    "date": 1748433338478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,14 @@\n interface FileSelectorProps {\r\n   accept?: string;\r\n   multiple?: boolean;\r\n   onFilesSelected?: (files: UploadFile[]) => void;\r\n-  onProgress?: (progress: number, current: number, total: number) => void;\r\n+  onProgress?: (\r\n+    progress: number,\r\n+    current: number,\r\n+    total: number,\r\n+    costSeconds?: number\r\n+  ) => void;\r\n }\r\n \r\n const FileSelector: React.FC<FileSelectorProps> = ({\r\n   accept = \"*\",\r\n@@ -33,36 +38,58 @@\n     onChange: async ({ fileList: newFileList }) => {\r\n       setFileList(newFileList);\r\n       onFilesSelected?.(newFileList);\r\n       setLoading(true);\r\n+      const startTime = Date.now();\r\n+      let added = 0;\r\n+      let skipped = 0;\r\n+      let failed = 0;\r\n+      let failedFiles: string[] = [];\r\n       try {\r\n         let current = 0;\r\n         const total = newFileList.length;\r\n         await Promise.all(\r\n           newFileList.map(async (item) => {\r\n             const file = item.originFileObj;\r\n             if (!file) return;\r\n-            const meta = await fileToArrayBufferWithWorker(file);\r\n-            const exists = await getFileMeta(meta.key);\r\n-            if (!exists) {\r\n-              const metaWithTime: UploadFileMeta = {\r\n-                ...meta,\r\n-                addedAt: Date.now(),\r\n-              };\r\n-              await saveFileMeta(metaWithTime);\r\n+            try {\r\n+              const meta = await fileToArrayBufferWithWorker(file);\r\n+              const exists = await getFileMeta(meta.key);\r\n+              if (!exists) {\r\n+                const metaWithTime: UploadFileMeta = {\r\n+                  ...meta,\r\n+                  addedAt: Date.now(),\r\n+                };\r\n+                await saveFileMeta(metaWithTime);\r\n+                added++;\r\n+              } else {\r\n+                skipped++;\r\n+              }\r\n+            } catch (err) {\r\n+              failed++;\r\n+              failedFiles.push(item.name);\r\n             }\r\n             current++;\r\n             onProgress?.(Math.round((current / total) * 100), current, total);\r\n           })\r\n         );\r\n-        message.success(\"文件已自动处理并存入本地数据库（去重）！\");\r\n+        const endTime = Date.now();\r\n+        const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n+        let msg = `共处理${total}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n+        msg += `，用时${costSeconds}秒。`;\r\n+        if (failed > 0) {\r\n+          msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n+          message.error(msg);\r\n+        } else {\r\n+          message.success(msg);\r\n+        }\r\n+        onProgress?.(100, total, total, Number(costSeconds));\r\n       } catch (err) {\r\n         message.error(\r\n           \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n         );\r\n       } finally {\r\n         setLoading(false);\r\n-        onProgress?.(100, fileList.length, fileList.length);\r\n       }\r\n     },\r\n     onRemove: (file) => {\r\n       const newList = fileList.filter((item) => item.uid !== file.uid);\r\n"
                },
                {
                    "date": 1748433547833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,19 @@\n       const startTime = Date.now();\r\n       let added = 0;\r\n       let skipped = 0;\r\n       let failed = 0;\r\n-      let failedFiles: string[] = [];\r\n+      const failedFiles: string[] = [];\r\n+      let msgKey = \"file-process-msg\";\r\n       try {\r\n         let current = 0;\r\n         const total = newFileList.length;\r\n+        message.destroy(msgKey);\r\n+        message.loading({\r\n+          content: \"正在处理文件...\",\r\n+          key: msgKey,\r\n+          duration: 0,\r\n+        });\r\n         await Promise.all(\r\n           newFileList.map(async (item) => {\r\n             const file = item.originFileObj;\r\n             if (!file) return;\r\n@@ -63,9 +70,9 @@\n                 added++;\r\n               } else {\r\n                 skipped++;\r\n               }\r\n-            } catch (err) {\r\n+            } catch {\r\n               failed++;\r\n               failedFiles.push(item.name);\r\n             }\r\n             current++;\r\n@@ -77,17 +84,20 @@\n         let msg = `共处理${total}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n         msg += `，用时${costSeconds}秒。`;\r\n         if (failed > 0) {\r\n           msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n-          message.error(msg);\r\n+          message.error({ content: msg, key: msgKey, duration: 5 });\r\n         } else {\r\n-          message.success(msg);\r\n+          message.success({ content: msg, key: msgKey, duration: 3 });\r\n         }\r\n         onProgress?.(100, total, total, Number(costSeconds));\r\n       } catch (err) {\r\n-        message.error(\r\n-          \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\")\r\n-        );\r\n+        message.error({\r\n+          content:\r\n+            \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\"),\r\n+          key: msgKey,\r\n+          duration: 5,\r\n+        });\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     },\r\n"
                },
                {
                    "date": 1748433822018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n       let added = 0;\r\n       let skipped = 0;\r\n       let failed = 0;\r\n       const failedFiles: string[] = [];\r\n-      let msgKey = \"file-process-msg\";\r\n+      const msgKey = \"file-process-msg\";\r\n       try {\r\n         let current = 0;\r\n         const total = newFileList.length;\r\n         message.destroy(msgKey);\r\n@@ -53,33 +53,31 @@\n           content: \"正在处理文件...\",\r\n           key: msgKey,\r\n           duration: 0,\r\n         });\r\n-        await Promise.all(\r\n-          newFileList.map(async (item) => {\r\n-            const file = item.originFileObj;\r\n-            if (!file) return;\r\n-            try {\r\n-              const meta = await fileToArrayBufferWithWorker(file);\r\n-              const exists = await getFileMeta(meta.key);\r\n-              if (!exists) {\r\n-                const metaWithTime: UploadFileMeta = {\r\n-                  ...meta,\r\n-                  addedAt: Date.now(),\r\n-                };\r\n-                await saveFileMeta(metaWithTime);\r\n-                added++;\r\n-              } else {\r\n-                skipped++;\r\n-              }\r\n-            } catch {\r\n-              failed++;\r\n-              failedFiles.push(item.name);\r\n+        for (const item of newFileList) {\r\n+          const file = item.originFileObj;\r\n+          if (!file) continue;\r\n+          try {\r\n+            const meta = await fileToArrayBufferWithWorker(file);\r\n+            const exists = await getFileMeta(meta.key);\r\n+            if (!exists) {\r\n+              const metaWithTime: UploadFileMeta = {\r\n+                ...meta,\r\n+                addedAt: Date.now(),\r\n+              };\r\n+              await saveFileMeta(metaWithTime);\r\n+              added++;\r\n+            } else {\r\n+              skipped++;\r\n             }\r\n-            current++;\r\n-            onProgress?.(Math.round((current / total) * 100), current, total);\r\n-          })\r\n-        );\r\n+          } catch {\r\n+            failed++;\r\n+            failedFiles.push(item.name);\r\n+          }\r\n+          current++;\r\n+          onProgress?.(Math.round((current / total) * 100), current, total);\r\n+        }\r\n         const endTime = Date.now();\r\n         const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n         let msg = `共处理${total}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n         msg += `，用时${costSeconds}秒。`;\r\n"
                },
                {
                    "date": 1748433904693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n           duration: 5,\r\n         });\r\n       } finally {\r\n         setLoading(false);\r\n+        setFileList([]);\r\n       }\r\n     },\r\n     onRemove: (file) => {\r\n       const newList = fileList.filter((item) => item.uid !== file.uid);\r\n"
                },
                {
                    "date": 1748433981834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,98 +24,95 @@\n   multiple = true,\r\n   onFilesSelected,\r\n   onProgress,\r\n }) => {\r\n-  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n   const [loading, setLoading] = useState(false);\r\n+  const [fileCount, setFileCount] = useState(0);\r\n+  const [processed, setProcessed] = useState(0);\r\n+  const [added, setAdded] = useState(0);\r\n+  const [skipped, setSkipped] = useState(0);\r\n+  const [failed, setFailed] = useState(0);\r\n+  const [failedFiles, setFailedFiles] = useState<string[]>([]);\r\n+  const msgKey = \"file-process-msg\";\r\n+  const [startTime, setStartTime] = useState<number>(0);\r\n \r\n+  const handleBeforeUpload = async (file: File) => {\r\n+    if (!loading) {\r\n+      // 新一轮批量\r\n+      setFileCount(0);\r\n+      setProcessed(0);\r\n+      setAdded(0);\r\n+      setSkipped(0);\r\n+      setFailed(0);\r\n+      setFailedFiles([]);\r\n+      setStartTime(Date.now());\r\n+      setFileCount(1);\r\n+      setLoading(true);\r\n+      message.destroy(msgKey);\r\n+      message.loading({ content: \"正在处理文件...\", key: msgKey, duration: 0 });\r\n+    } else {\r\n+      setFileCount((c) => c + 1);\r\n+    }\r\n+    try {\r\n+      const meta = await fileToArrayBufferWithWorker(file);\r\n+      const exists = await getFileMeta(meta.key);\r\n+      if (!exists) {\r\n+        const metaWithTime: UploadFileMeta = {\r\n+          ...meta,\r\n+          addedAt: Date.now(),\r\n+        };\r\n+        await saveFileMeta(metaWithTime);\r\n+        setAdded((a) => a + 1);\r\n+      } else {\r\n+        setSkipped((s) => s + 1);\r\n+      }\r\n+    } catch {\r\n+      setFailed((f) => f + 1);\r\n+      setFailedFiles((arr) => [...arr, file.name]);\r\n+    }\r\n+    setProcessed((p) => p + 1);\r\n+    return false; // 阻止默认上传\r\n+  };\r\n+\r\n+  React.useEffect(() => {\r\n+    if (fileCount > 0 && processed === fileCount) {\r\n+      // 批量处理完成\r\n+      const endTime = Date.now();\r\n+      const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n+      let msg = `共处理${fileCount}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n+      msg += `，用时${costSeconds}秒。`;\r\n+      if (failed > 0) {\r\n+        msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n+        message.error({ content: msg, key: msgKey, duration: 5 });\r\n+      } else {\r\n+        message.success({ content: msg, key: msgKey, duration: 3 });\r\n+      }\r\n+      onProgress?.(100, fileCount, fileCount, Number(costSeconds));\r\n+      setLoading(false);\r\n+    } else if (fileCount > 0) {\r\n+      onProgress?.(\r\n+        Math.round((processed / fileCount) * 100),\r\n+        processed,\r\n+        fileCount\r\n+      );\r\n+    }\r\n+    // eslint-disable-next-line\r\n+  }, [processed, fileCount]);\r\n+\r\n   const props: UploadProps = {\r\n     multiple,\r\n     accept,\r\n-    fileList,\r\n-    beforeUpload: () => {\r\n-      return false;\r\n+    showUploadList: false,\r\n+    beforeUpload: handleBeforeUpload,\r\n+    onChange: ({ fileList }) => {\r\n+      onFilesSelected?.(fileList);\r\n     },\r\n-    onChange: async ({ fileList: newFileList }) => {\r\n-      setFileList(newFileList);\r\n-      onFilesSelected?.(newFileList);\r\n-      setLoading(true);\r\n-      const startTime = Date.now();\r\n-      let added = 0;\r\n-      let skipped = 0;\r\n-      let failed = 0;\r\n-      const failedFiles: string[] = [];\r\n-      const msgKey = \"file-process-msg\";\r\n-      try {\r\n-        let current = 0;\r\n-        const total = newFileList.length;\r\n-        message.destroy(msgKey);\r\n-        message.loading({\r\n-          content: \"正在处理文件...\",\r\n-          key: msgKey,\r\n-          duration: 0,\r\n-        });\r\n-        for (const item of newFileList) {\r\n-          const file = item.originFileObj;\r\n-          if (!file) continue;\r\n-          try {\r\n-            const meta = await fileToArrayBufferWithWorker(file);\r\n-            const exists = await getFileMeta(meta.key);\r\n-            if (!exists) {\r\n-              const metaWithTime: UploadFileMeta = {\r\n-                ...meta,\r\n-                addedAt: Date.now(),\r\n-              };\r\n-              await saveFileMeta(metaWithTime);\r\n-              added++;\r\n-            } else {\r\n-              skipped++;\r\n-            }\r\n-          } catch {\r\n-            failed++;\r\n-            failedFiles.push(item.name);\r\n-          }\r\n-          current++;\r\n-          onProgress?.(Math.round((current / total) * 100), current, total);\r\n-        }\r\n-        const endTime = Date.now();\r\n-        const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n-        let msg = `共处理${total}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n-        msg += `，用时${costSeconds}秒。`;\r\n-        if (failed > 0) {\r\n-          msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n-          message.error({ content: msg, key: msgKey, duration: 5 });\r\n-        } else {\r\n-          message.success({ content: msg, key: msgKey, duration: 3 });\r\n-        }\r\n-        onProgress?.(100, total, total, Number(costSeconds));\r\n-      } catch (err) {\r\n-        message.error({\r\n-          content:\r\n-            \"处理文件时出错！\" + (err instanceof Error ? err.message : \"\"),\r\n-          key: msgKey,\r\n-          duration: 5,\r\n-        });\r\n-      } finally {\r\n-        setLoading(false);\r\n-        setFileList([]);\r\n-      }\r\n-    },\r\n-    onRemove: (file) => {\r\n-      const newList = fileList.filter((item) => item.uid !== file.uid);\r\n-      setFileList(newList);\r\n-      onFilesSelected?.(newList);\r\n-    },\r\n+    disabled: loading,\r\n   };\r\n \r\n   return (\r\n     <div>\r\n-      <Upload.Dragger\r\n-        {...props}\r\n-        style={{ marginBottom: 16 }}\r\n-        disabled={loading}\r\n-        showUploadList={false}\r\n-      >\r\n+      <Upload.Dragger {...props} style={{ marginBottom: 16 }}>\r\n         <p className=\"ant-upload-drag-icon\">\r\n           <UploadOutlined />\r\n         </p>\r\n         <p className=\"ant-upload-text\">点击或拖拽文件到此区域上传</p>\r\n"
                },
                {
                    "date": 1748434133642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,89 +24,78 @@\n   multiple = true,\r\n   onFilesSelected,\r\n   onProgress,\r\n }) => {\r\n+  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n   const [loading, setLoading] = useState(false);\r\n-  const [fileCount, setFileCount] = useState(0);\r\n-  const [processed, setProcessed] = useState(0);\r\n-  const [added, setAdded] = useState(0);\r\n-  const [skipped, setSkipped] = useState(0);\r\n-  const [failed, setFailed] = useState(0);\r\n-  const [failedFiles, setFailedFiles] = useState<string[]>([]);\r\n   const msgKey = \"file-process-msg\";\r\n-  const [startTime, setStartTime] = useState<number>(0);\r\n \r\n-  const handleBeforeUpload = async (file: File) => {\r\n-    if (!loading) {\r\n-      // 新一轮批量\r\n-      setFileCount(0);\r\n-      setProcessed(0);\r\n-      setAdded(0);\r\n-      setSkipped(0);\r\n-      setFailed(0);\r\n-      setFailedFiles([]);\r\n-      setStartTime(Date.now());\r\n-      setFileCount(1);\r\n-      setLoading(true);\r\n-      message.destroy(msgKey);\r\n-      message.loading({ content: \"正在处理文件...\", key: msgKey, duration: 0 });\r\n+  const handleChange: UploadProps[\"onChange\"] = async ({\r\n+    fileList: newFileList,\r\n+  }) => {\r\n+    if (!newFileList.length) return;\r\n+    setFileList(newFileList);\r\n+    onFilesSelected?.(newFileList);\r\n+    setLoading(true);\r\n+    const startTime = Date.now();\r\n+    let added = 0;\r\n+    let skipped = 0;\r\n+    let failed = 0;\r\n+    const failedFiles: string[] = [];\r\n+    let current = 0;\r\n+    const total = newFileList.length;\r\n+    message.destroy(msgKey);\r\n+    message.loading({ content: \"正在处理文件...\", key: msgKey, duration: 0 });\r\n+    for (const item of newFileList) {\r\n+      const file = item.originFileObj;\r\n+      if (!file) {\r\n+        failed++;\r\n+        failedFiles.push(item.name);\r\n+        current++;\r\n+        onProgress?.(Math.round((current / total) * 100), current, total);\r\n+        continue;\r\n+      }\r\n+      try {\r\n+        const meta = await fileToArrayBufferWithWorker(file);\r\n+        const exists = await getFileMeta(meta.key);\r\n+        if (!exists) {\r\n+          const metaWithTime: UploadFileMeta = {\r\n+            ...meta,\r\n+            addedAt: Date.now(),\r\n+          };\r\n+          await saveFileMeta(metaWithTime);\r\n+          added++;\r\n+        } else {\r\n+          skipped++;\r\n+        }\r\n+      } catch {\r\n+        failed++;\r\n+        failedFiles.push(item.name);\r\n+      }\r\n+      current++;\r\n+      onProgress?.(Math.round((current / total) * 100), current, total);\r\n+    }\r\n+    const endTime = Date.now();\r\n+    const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n+    let msg = `共处理${total}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n+    msg += `，用时${costSeconds}秒。`;\r\n+    if (failed > 0) {\r\n+      msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n+      message.error({ content: msg, key: msgKey, duration: 5 });\r\n     } else {\r\n-      setFileCount((c) => c + 1);\r\n+      message.success({ content: msg, key: msgKey, duration: 3 });\r\n     }\r\n-    try {\r\n-      const meta = await fileToArrayBufferWithWorker(file);\r\n-      const exists = await getFileMeta(meta.key);\r\n-      if (!exists) {\r\n-        const metaWithTime: UploadFileMeta = {\r\n-          ...meta,\r\n-          addedAt: Date.now(),\r\n-        };\r\n-        await saveFileMeta(metaWithTime);\r\n-        setAdded((a) => a + 1);\r\n-      } else {\r\n-        setSkipped((s) => s + 1);\r\n-      }\r\n-    } catch {\r\n-      setFailed((f) => f + 1);\r\n-      setFailedFiles((arr) => [...arr, file.name]);\r\n-    }\r\n-    setProcessed((p) => p + 1);\r\n-    return false; // 阻止默认上传\r\n+    onProgress?.(100, total, total, Number(costSeconds));\r\n+    setLoading(false);\r\n+    setFileList([]); // 处理完清空，保证下次只处理新批次\r\n   };\r\n \r\n-  React.useEffect(() => {\r\n-    if (fileCount > 0 && processed === fileCount) {\r\n-      // 批量处理完成\r\n-      const endTime = Date.now();\r\n-      const costSeconds = ((endTime - startTime) / 1000).toFixed(2);\r\n-      let msg = `共处理${fileCount}个文件，新增${added}个，跳过${skipped}个重复文件`;\r\n-      msg += `，用时${costSeconds}秒。`;\r\n-      if (failed > 0) {\r\n-        msg += `\\n失败${failed}个：${failedFiles.join(\", \")}`;\r\n-        message.error({ content: msg, key: msgKey, duration: 5 });\r\n-      } else {\r\n-        message.success({ content: msg, key: msgKey, duration: 3 });\r\n-      }\r\n-      onProgress?.(100, fileCount, fileCount, Number(costSeconds));\r\n-      setLoading(false);\r\n-    } else if (fileCount > 0) {\r\n-      onProgress?.(\r\n-        Math.round((processed / fileCount) * 100),\r\n-        processed,\r\n-        fileCount\r\n-      );\r\n-    }\r\n-    // eslint-disable-next-line\r\n-  }, [processed, fileCount]);\r\n-\r\n   const props: UploadProps = {\r\n     multiple,\r\n     accept,\r\n     showUploadList: false,\r\n-    beforeUpload: handleBeforeUpload,\r\n-    onChange: ({ fileList }) => {\r\n-      onFilesSelected?.(fileList);\r\n-    },\r\n+    beforeUpload: () => false, // 阻止自动上传\r\n+    onChange: handleChange,\r\n     disabled: loading,\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748434366116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,39 +24,37 @@\n   multiple = true,\r\n   onFilesSelected,\r\n   onProgress,\r\n }) => {\r\n-  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n   const [loading, setLoading] = useState(false);\r\n   const msgKey = \"file-process-msg\";\r\n \r\n-  const handleChange: UploadProps[\"onChange\"] = async ({\r\n-    fileList: newFileList,\r\n-  }) => {\r\n-    if (!newFileList.length) return;\r\n-    setFileList(newFileList);\r\n-    onFilesSelected?.(newFileList);\r\n+  // customRequest 只处理本次新选文件\r\n+  const handleCustomRequest = async (options: any) => {\r\n+    const { file, fileList } = options;\r\n+    // fileList 只包含本次新选的文件\r\n+    if (!fileList || fileList.length === 0) return;\r\n     setLoading(true);\r\n     const startTime = Date.now();\r\n     let added = 0;\r\n     let skipped = 0;\r\n     let failed = 0;\r\n     const failedFiles: string[] = [];\r\n     let current = 0;\r\n-    const total = newFileList.length;\r\n+    const total = fileList.length;\r\n     message.destroy(msgKey);\r\n     message.loading({ content: \"正在处理文件...\", key: msgKey, duration: 0 });\r\n-    for (const item of newFileList) {\r\n-      const file = item.originFileObj;\r\n-      if (!file) {\r\n+    for (const item of fileList) {\r\n+      const f = item.originFileObj || item;\r\n+      if (!f) {\r\n         failed++;\r\n         failedFiles.push(item.name);\r\n         current++;\r\n         onProgress?.(Math.round((current / total) * 100), current, total);\r\n         continue;\r\n       }\r\n       try {\r\n-        const meta = await fileToArrayBufferWithWorker(file);\r\n+        const meta = await fileToArrayBufferWithWorker(f);\r\n         const exists = await getFileMeta(meta.key);\r\n         if (!exists) {\r\n           const metaWithTime: UploadFileMeta = {\r\n             ...meta,\r\n@@ -85,17 +83,20 @@\n       message.success({ content: msg, key: msgKey, duration: 3 });\r\n     }\r\n     onProgress?.(100, total, total, Number(costSeconds));\r\n     setLoading(false);\r\n-    setFileList([]); // 处理完清空，保证下次只处理新批次\r\n+    options.onSuccess && options.onSuccess();\r\n   };\r\n \r\n   const props: UploadProps = {\r\n     multiple,\r\n     accept,\r\n     showUploadList: false,\r\n     beforeUpload: () => false, // 阻止自动上传\r\n-    onChange: handleChange,\r\n+    customRequest: handleCustomRequest,\r\n+    onChange: ({ fileList }) => {\r\n+      onFilesSelected?.(fileList);\r\n+    },\r\n     disabled: loading,\r\n   };\r\n \r\n   return (\r\n"
                },
                {
                    "date": 1748434450778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n-import React, { useState } from \"react\";\r\n-import { Upload, message } from \"antd\";\r\n-import type { UploadFile, UploadProps } from \"antd/es/upload/interface\";\r\n+import { Button, message } from \"antd\";\r\n+import React, { useRef, useState } from \"react\";\r\n import { getFileMeta, saveFileMeta } from \"../services/dbService\";\r\n \r\n import type { UploadFileMeta } from \"../types/file\";\r\n import { UploadOutlined } from \"@ant-design/icons\";\r\n@@ -9,9 +8,8 @@\n \r\n interface FileSelectorProps {\r\n   accept?: string;\r\n   multiple?: boolean;\r\n-  onFilesSelected?: (files: UploadFile[]) => void;\r\n   onProgress?: (\r\n     progress: number,\r\n     current: number,\r\n     total: number,\r\n@@ -21,40 +19,31 @@\n \r\n const FileSelector: React.FC<FileSelectorProps> = ({\r\n   accept = \"*\",\r\n   multiple = true,\r\n-  onFilesSelected,\r\n   onProgress,\r\n }) => {\r\n+  const inputRef = useRef<HTMLInputElement>(null);\r\n   const [loading, setLoading] = useState(false);\r\n   const msgKey = \"file-process-msg\";\r\n \r\n-  // customRequest 只处理本次新选文件\r\n-  const handleCustomRequest = async (options: any) => {\r\n-    const { file, fileList } = options;\r\n-    // fileList 只包含本次新选的文件\r\n-    if (!fileList || fileList.length === 0) return;\r\n+  const handleFiles = async (e: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const files = e.target.files;\r\n+    if (!files || files.length === 0) return;\r\n     setLoading(true);\r\n     const startTime = Date.now();\r\n     let added = 0;\r\n     let skipped = 0;\r\n     let failed = 0;\r\n     const failedFiles: string[] = [];\r\n     let current = 0;\r\n-    const total = fileList.length;\r\n+    const total = files.length;\r\n     message.destroy(msgKey);\r\n     message.loading({ content: \"正在处理文件...\", key: msgKey, duration: 0 });\r\n-    for (const item of fileList) {\r\n-      const f = item.originFileObj || item;\r\n-      if (!f) {\r\n-        failed++;\r\n-        failedFiles.push(item.name);\r\n-        current++;\r\n-        onProgress?.(Math.round((current / total) * 100), current, total);\r\n-        continue;\r\n-      }\r\n+    for (let i = 0; i < files.length; i++) {\r\n+      const file = files[i];\r\n       try {\r\n-        const meta = await fileToArrayBufferWithWorker(f);\r\n+        const meta = await fileToArrayBufferWithWorker(file);\r\n         const exists = await getFileMeta(meta.key);\r\n         if (!exists) {\r\n           const metaWithTime: UploadFileMeta = {\r\n             ...meta,\r\n@@ -66,9 +55,9 @@\n           skipped++;\r\n         }\r\n       } catch {\r\n         failed++;\r\n-        failedFiles.push(item.name);\r\n+        failedFiles.push(file.name);\r\n       }\r\n       current++;\r\n       onProgress?.(Math.round((current / total) * 100), current, total);\r\n     }\r\n@@ -83,32 +72,34 @@\n       message.success({ content: msg, key: msgKey, duration: 3 });\r\n     }\r\n     onProgress?.(100, total, total, Number(costSeconds));\r\n     setLoading(false);\r\n-    options.onSuccess && options.onSuccess();\r\n+    // 清空input，保证下次可重新选择同一文件\r\n+    if (inputRef.current) inputRef.current.value = \"\";\r\n   };\r\n \r\n-  const props: UploadProps = {\r\n-    multiple,\r\n-    accept,\r\n-    showUploadList: false,\r\n-    beforeUpload: () => false, // 阻止自动上传\r\n-    customRequest: handleCustomRequest,\r\n-    onChange: ({ fileList }) => {\r\n-      onFilesSelected?.(fileList);\r\n-    },\r\n-    disabled: loading,\r\n-  };\r\n-\r\n   return (\r\n-    <div>\r\n-      <Upload.Dragger {...props} style={{ marginBottom: 16 }}>\r\n-        <p className=\"ant-upload-drag-icon\">\r\n-          <UploadOutlined />\r\n-        </p>\r\n-        <p className=\"ant-upload-text\">点击或拖拽文件到此区域上传</p>\r\n-        <p className=\"ant-upload-hint\">支持多选，自动处理并去重</p>\r\n-      </Upload.Dragger>\r\n+    <div style={{ marginBottom: 16 }}>\r\n+      <input\r\n+        type=\"file\"\r\n+        ref={inputRef}\r\n+        style={{ display: \"none\" }}\r\n+        accept={accept}\r\n+        multiple={multiple}\r\n+        onChange={handleFiles}\r\n+        disabled={loading}\r\n+      />\r\n+      <Button\r\n+        icon={<UploadOutlined />}\r\n+        onClick={() => inputRef.current?.click()}\r\n+        disabled={loading}\r\n+        type=\"primary\"\r\n+      >\r\n+        选择文件\r\n+      </Button>\r\n+      <span style={{ marginLeft: 12, color: \"#888\" }}>\r\n+        点击或拖拽文件到此按钮\r\n+      </span>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1748432648803,
            "name": "Commit-0",
            "content": "import { Button, Upload, message } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport type { UploadFile, UploadProps } from \"antd/es/upload/interface\";\r\n\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport { fileToArrayBufferWithWorker } from \"../services/fileWorkerService\";\r\nimport { saveFileMeta } from \"../services/dbService\";\r\n\r\ninterface FileSelectorProps {\r\n  accept?: string;\r\n  multiple?: boolean;\r\n  onFilesSelected?: (files: UploadFile[]) => void;\r\n}\r\n\r\nconst FileSelector: React.FC<FileSelectorProps> = ({\r\n  accept = \"*\",\r\n  multiple = true,\r\n  onFilesSelected,\r\n}) => {\r\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const props: UploadProps = {\r\n    multiple,\r\n    accept,\r\n    fileList,\r\n    beforeUpload: () => {\r\n      return false;\r\n    },\r\n    onChange: ({ fileList: newFileList }) => {\r\n      setFileList(newFileList);\r\n      onFilesSelected?.(newFileList);\r\n    },\r\n    onRemove: (file) => {\r\n      const newList = fileList.filter((item) => item.uid !== file.uid);\r\n      setFileList(newList);\r\n      onFilesSelected?.(newList);\r\n    },\r\n  };\r\n\r\n  // 生成唯一key（文件名+时间戳+uid）\r\n  const genKey = (file: File, uid: string) => {\r\n    return `${file.name}_${file.lastModified}_${uid}`;\r\n  };\r\n\r\n  const handleProcess = async () => {\r\n    if (fileList.length === 0) return;\r\n    setLoading(true);\r\n    try {\r\n      await Promise.all(\r\n        fileList.map(async (item) => {\r\n          const file = item.originFileObj;\r\n          if (!file) return;\r\n          const key = genKey(file, item.uid);\r\n          const meta = await fileToArrayBufferWithWorker(file, key);\r\n          await saveFileMeta(meta);\r\n        })\r\n      );\r\n      message.success(\"所有文件已处理并存入本地数据库！\");\r\n    } catch (err) {\r\n      message.error(\"处理文件时出错！\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Upload.Dragger {...props} style={{ marginBottom: 16 }}>\r\n        <p className=\"ant-upload-drag-icon\">\r\n          <UploadOutlined />\r\n        </p>\r\n        <p className=\"ant-upload-text\">点击或拖拽文件到此区域上传</p>\r\n        <p className=\"ant-upload-hint\">支持多选，暂不自动上传</p>\r\n      </Upload.Dragger>\r\n      <Button\r\n        type=\"primary\"\r\n        disabled={fileList.length === 0 || loading}\r\n        loading={loading}\r\n        onClick={handleProcess}\r\n      >\r\n        处理选中文件\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileSelector;\r\n"
        }
    ]
}