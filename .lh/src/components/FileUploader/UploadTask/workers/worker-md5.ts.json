{
    "sourceFile": "src/components/FileUploader/UploadTask/workers/worker-md5.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1748529110752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748529120563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,26 +48,26 @@\n         // 报告进度\r\n         const currentProgress = Math.round(((index + 1) / total) * 100);\r\n         if (currentProgress - lastReportedProgress >= PROGRESS_INTERVAL) {\r\n           self.postMessage({\r\n-            type: 'progress',\r\n+            type: \"progress\",\r\n             progress: currentProgress,\r\n             processedChunks: index + 1,\r\n-            totalChunks: total\r\n+            totalChunks: total,\r\n           });\r\n           lastReportedProgress = currentProgress;\r\n         }\r\n       }\r\n \r\n       // 每批次完成后让出主线程\r\n-      await new Promise(resolve => setTimeout(resolve, 0));\r\n+      await new Promise((resolve) => setTimeout(resolve, 0));\r\n     }\r\n \r\n     const fileMD5 = fileSpark.end();\r\n-    self.postMessage({ type: 'complete', fileMD5, chunkMD5s });\r\n+    self.postMessage({ type: \"complete\", fileMD5, chunkMD5s });\r\n   } catch (error) {\r\n     self.postMessage({\r\n-      type: 'error',\r\n-      error: error.message || '计算MD5时发生错误'\r\n+      type: \"error\",\r\n+      error: error.message || \"计算MD5时发生错误\",\r\n     });\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1748529147775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,25 @@\n // 引入 spark-md5\r\n+// @ts-ignore: self.importScripts is not in lib.dom.d.ts\r\n importScripts(\"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\");\r\n \r\n+// 声明SparkMD5类型，避免TS错误\r\n+declare global {\r\n+  interface Window {\r\n+    SparkMD5: {\r\n+      ArrayBuffer: new () => {\r\n+        append: (buffer: ArrayBuffer) => void;\r\n+        end: () => string;\r\n+      };\r\n+    };\r\n+  }\r\n+}\r\n+\r\n self.onmessage = async function (e) {\r\n   const { file, chunkSize } = e.data;\r\n   const total = Math.ceil(file.size / chunkSize);\r\n-  const chunkMD5s = [];\r\n-  let fileSpark = new self.SparkMD5.ArrayBuffer();\r\n+  const chunkMD5s: string[] = [];\r\n+  const fileSpark = new self.SparkMD5.ArrayBuffer();\r\n \r\n   // 每处理5个分片报告一次进度，减少消息传递频率\r\n   const PROGRESS_INTERVAL = 5;\r\n   let lastReportedProgress = 0;\r\n@@ -48,26 +61,26 @@\n         // 报告进度\r\n         const currentProgress = Math.round(((index + 1) / total) * 100);\r\n         if (currentProgress - lastReportedProgress >= PROGRESS_INTERVAL) {\r\n           self.postMessage({\r\n-            type: \"progress\",\r\n+            type: 'progress',\r\n             progress: currentProgress,\r\n             processedChunks: index + 1,\r\n-            totalChunks: total,\r\n+            totalChunks: total\r\n           });\r\n           lastReportedProgress = currentProgress;\r\n         }\r\n       }\r\n \r\n       // 每批次完成后让出主线程\r\n-      await new Promise((resolve) => setTimeout(resolve, 0));\r\n+      await new Promise(resolve => setTimeout(resolve, 0));\r\n     }\r\n \r\n     const fileMD5 = fileSpark.end();\r\n-    self.postMessage({ type: \"complete\", fileMD5, chunkMD5s });\r\n-  } catch (error) {\r\n+    self.postMessage({ type: 'complete', fileMD5, chunkMD5s });\r\n+  } catch (error: unknown) {\r\n     self.postMessage({\r\n-      type: \"error\",\r\n-      error: error.message || \"计算MD5时发生错误\",\r\n+      type: 'error',\r\n+      error: error instanceof Error ? error.message : '计算MD5时发生错误'\r\n     });\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1748529210955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n // 引入 spark-md5\r\n-// @ts-ignore: self.importScripts is not in lib.dom.d.ts\r\n+// @ts-expect-error: self.importScripts is not in lib.dom.d.ts\r\n importScripts(\"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\");\r\n \r\n // 声明SparkMD5类型，避免TS错误\r\n declare global {\r\n"
                },
                {
                    "date": 1748529637538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,26 +61,26 @@\n         // 报告进度\r\n         const currentProgress = Math.round(((index + 1) / total) * 100);\r\n         if (currentProgress - lastReportedProgress >= PROGRESS_INTERVAL) {\r\n           self.postMessage({\r\n-            type: 'progress',\r\n+            type: \"progress\",\r\n             progress: currentProgress,\r\n             processedChunks: index + 1,\r\n-            totalChunks: total\r\n+            totalChunks: total,\r\n           });\r\n           lastReportedProgress = currentProgress;\r\n         }\r\n       }\r\n \r\n       // 每批次完成后让出主线程\r\n-      await new Promise(resolve => setTimeout(resolve, 0));\r\n+      await new Promise((resolve) => setTimeout(resolve, 0));\r\n     }\r\n \r\n     const fileMD5 = fileSpark.end();\r\n-    self.postMessage({ type: 'complete', fileMD5, chunkMD5s });\r\n+    self.postMessage({ type: \"complete\", fileMD5, chunkMD5s });\r\n   } catch (error: unknown) {\r\n     self.postMessage({\r\n-      type: 'error',\r\n-      error: error instanceof Error ? error.message : '计算MD5时发生错误'\r\n+      type: \"error\",\r\n+      error: error instanceof Error ? error.message : \"计算MD5时发生错误\",\r\n     });\r\n   }\r\n };\r\n"
                }
            ],
            "date": 1748529110752,
            "name": "Commit-0",
            "content": "// 引入 spark-md5\r\nimportScripts(\"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\");\r\n\r\nself.onmessage = async function (e) {\r\n  const { file, chunkSize } = e.data;\r\n  const total = Math.ceil(file.size / chunkSize);\r\n  const chunkMD5s = [];\r\n  let fileSpark = new self.SparkMD5.ArrayBuffer();\r\n\r\n  // 每处理5个分片报告一次进度，减少消息传递频率\r\n  const PROGRESS_INTERVAL = 5;\r\n  let lastReportedProgress = 0;\r\n\r\n  try {\r\n    // 分批处理，每批处理10个分片，避免长时间阻塞\r\n    const BATCH_SIZE = 10;\r\n    for (let batchStart = 0; batchStart < total; batchStart += BATCH_SIZE) {\r\n      const batchEnd = Math.min(batchStart + BATCH_SIZE, total);\r\n\r\n      // 创建当前批次的所有Promise\r\n      const batchPromises = [];\r\n      for (let i = batchStart; i < batchEnd; i++) {\r\n        const start = i * chunkSize;\r\n        const end = Math.min(file.size, start + chunkSize);\r\n        const chunk = file.slice(start, end);\r\n\r\n        // 将每个分片的处理包装成Promise\r\n        const promise = (async (index) => {\r\n          const arrayBuffer = await chunk.arrayBuffer();\r\n          const chunkSpark = new self.SparkMD5.ArrayBuffer();\r\n          chunkSpark.append(arrayBuffer);\r\n          const chunkMD5 = chunkSpark.end();\r\n          return { index, arrayBuffer, chunkMD5 };\r\n        })(i);\r\n\r\n        batchPromises.push(promise);\r\n      }\r\n\r\n      // 等待当前批次的所有Promise完成\r\n      const results = await Promise.all(batchPromises);\r\n\r\n      // 处理结果\r\n      for (const { index, arrayBuffer, chunkMD5 } of results) {\r\n        // 确保按顺序添加到数组\r\n        chunkMD5s[index] = chunkMD5;\r\n        fileSpark.append(arrayBuffer);\r\n\r\n        // 报告进度\r\n        const currentProgress = Math.round(((index + 1) / total) * 100);\r\n        if (currentProgress - lastReportedProgress >= PROGRESS_INTERVAL) {\r\n          self.postMessage({\r\n            type: 'progress',\r\n            progress: currentProgress,\r\n            processedChunks: index + 1,\r\n            totalChunks: total\r\n          });\r\n          lastReportedProgress = currentProgress;\r\n        }\r\n      }\r\n\r\n      // 每批次完成后让出主线程\r\n      await new Promise(resolve => setTimeout(resolve, 0));\r\n    }\r\n\r\n    const fileMD5 = fileSpark.end();\r\n    self.postMessage({ type: 'complete', fileMD5, chunkMD5s });\r\n  } catch (error) {\r\n    self.postMessage({\r\n      type: 'error',\r\n      error: error.message || '计算MD5时发生错误'\r\n    });\r\n  }\r\n};\r\n"
        }
    ]
}