{
    "sourceFile": "src/components/FileUploader/UploadTask/workers/worker-md5.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748440832805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748441249004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,25 @@\n // 引入 spark-md5\r\n importScripts(\"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\");\r\n \r\n self.onmessage = async function (e) {\r\n-\tconst { file, chunkSize } = e.data;\r\n-\tconst total = Math.ceil(file.size / chunkSize);\r\n-\tconst chunkMD5s = [];\r\n-\tlet fileSpark = new self.SparkMD5.ArrayBuffer();\r\n+  const { file, chunkSize } = e.data;\r\n+  const total = Math.ceil(file.size / chunkSize);\r\n+  const chunkMD5s = [];\r\n+  let fileSpark = new self.SparkMD5.ArrayBuffer();\r\n \r\n-\tfor (let i = 0; i < total; i++) {\r\n-\t\tconst start = i * chunkSize;\r\n-\t\tconst end = Math.min(file.size, start + chunkSize);\r\n-\t\tconst chunk = file.slice(start, end);\r\n-\t\tconst arrayBuffer = await chunk.arrayBuffer();\r\n-\t\tconst chunkSpark = new self.SparkMD5.ArrayBuffer();\r\n-\t\tchunkSpark.append(arrayBuffer);\r\n-\t\tconst chunkMD5 = chunkSpark.end();\r\n-\t\tchunkMD5s.push(chunkMD5);\r\n-\t\tfileSpark.append(arrayBuffer);\r\n-\t\t// 可选：每处理完一个分片可 postMessage({ progress: i/total })\r\n-\t}\r\n\\ No newline at end of file\n+  for (let i = 0; i < total; i++) {\r\n+    const start = i * chunkSize;\r\n+    const end = Math.min(file.size, start + chunkSize);\r\n+    const chunk = file.slice(start, end);\r\n+    const arrayBuffer = await chunk.arrayBuffer();\r\n+    const chunkSpark = new self.SparkMD5.ArrayBuffer();\r\n+    chunkSpark.append(arrayBuffer);\r\n+    const chunkMD5 = chunkSpark.end();\r\n+    chunkMD5s.push(chunkMD5);\r\n+    fileSpark.append(arrayBuffer);\r\n+    // 可选：每处理完一个分片可 postMessage({ progress: i/total })\r\n+  }\r\n \r\n-\tconst fileMD5 = fileSpark.end();\r\n-\tself.postMessage({ fileMD5, chunkMD5s });\r\n-};\n+  const fileMD5 = fileSpark.end();\r\n+  self.postMessage({ fileMD5, chunkMD5s });\r\n+};\r\n"
                }
            ],
            "date": 1748440832805,
            "name": "Commit-0",
            "content": "// 引入 spark-md5\r\nimportScripts(\"https://cdn.jsdelivr.net/npm/spark-md5@3.0.2/spark-md5.min.js\");\r\n\r\nself.onmessage = async function (e) {\r\n\tconst { file, chunkSize } = e.data;\r\n\tconst total = Math.ceil(file.size / chunkSize);\r\n\tconst chunkMD5s = [];\r\n\tlet fileSpark = new self.SparkMD5.ArrayBuffer();\r\n\r\n\tfor (let i = 0; i < total; i++) {\r\n\t\tconst start = i * chunkSize;\r\n\t\tconst end = Math.min(file.size, start + chunkSize);\r\n\t\tconst chunk = file.slice(start, end);\r\n\t\tconst arrayBuffer = await chunk.arrayBuffer();\r\n\t\tconst chunkSpark = new self.SparkMD5.ArrayBuffer();\r\n\t\tchunkSpark.append(arrayBuffer);\r\n\t\tconst chunkMD5 = chunkSpark.end();\r\n\t\tchunkMD5s.push(chunkMD5);\r\n\t\tfileSpark.append(arrayBuffer);\r\n\t\t// 可选：每处理完一个分片可 postMessage({ progress: i/total })\r\n\t}\r\n\r\n\tconst fileMD5 = fileSpark.end();\r\n\tself.postMessage({ fileMD5, chunkMD5s });\r\n};"
        }
    ]
}