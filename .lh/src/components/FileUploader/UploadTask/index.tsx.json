{
    "sourceFile": "src/components/FileUploader/UploadTask/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1748432315252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748432414732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n-import ImageUploader from \"./components/ImageUploader\";\r\n+import FileSelector from \"./components/FileSelector\";\r\n import React from \"react\";\r\n \r\n const UploadTask: React.FC = () => {\r\n   return (\r\n     <div>\r\n-      <h2>图片批量上传任务</h2>\r\n-      <ImageUploader />\r\n+      <h2>文件批量上传任务</h2>\r\n+      <FileSelector />\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748432701637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,16 @@\n+import FileListPanel from \"./components/FileListPanel\";\r\n import FileSelector from \"./components/FileSelector\";\r\n import React from \"react\";\r\n \r\n const UploadTask: React.FC = () => {\r\n   return (\r\n     <div>\r\n       <h2>文件批量上传任务</h2>\r\n       <FileSelector />\r\n+      <div style={{ marginTop: 32 }}>\r\n+        <FileListPanel />\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1748433152715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,17 @@\n+import React, { useState } from \"react\";\r\n+\r\n import FileListPanel from \"./components/FileListPanel\";\r\n import FileSelector from \"./components/FileSelector\";\r\n-import React from \"react\";\r\n \r\n const UploadTask: React.FC = () => {\r\n+  const [progress, setProgress] = useState<number>(100);\r\n   return (\r\n     <div>\r\n       <h2>文件批量上传任务</h2>\r\n-      <FileSelector />\r\n+      <FileSelector onProgress={setProgress} />\r\n       <div style={{ marginTop: 32 }}>\r\n-        <FileListPanel />\r\n+        <FileListPanel progress={progress} />\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1748433366126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,26 @@\n import FileSelector from \"./components/FileSelector\";\r\n \r\n const UploadTask: React.FC = () => {\r\n   const [progress, setProgress] = useState<number>(100);\r\n+  const [costSeconds, setCostSeconds] = useState<number>(0);\r\n+\r\n+  const handleProgress = (\r\n+    progress: number,\r\n+    current: number,\r\n+    total: number,\r\n+    cost?: number\r\n+  ) => {\r\n+    setProgress(progress);\r\n+    if (typeof cost === \"number\") setCostSeconds(cost);\r\n+  };\r\n+\r\n   return (\r\n     <div>\r\n       <h2>文件批量上传任务</h2>\r\n-      <FileSelector onProgress={setProgress} />\r\n+      <FileSelector onProgress={handleProgress} />\r\n       <div style={{ marginTop: 32 }}>\r\n-        <FileListPanel progress={progress} />\r\n+        <FileListPanel progress={progress} costSeconds={costSeconds} />\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1748606742014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,42 @@\n+import { Button, Card, Space, Tabs } from \"antd\";\r\n+import {\r\n+  ClearOutlined,\r\n+  PauseCircleOutlined,\r\n+  PlayCircleOutlined,\r\n+} from \"@ant-design/icons\";\r\n import React, { useState } from \"react\";\r\n+import {\r\n+  clearQueue,\r\n+  getQueueStats,\r\n+  pauseQueue,\r\n+  resumeQueue,\r\n+} from \"./services/uploadService\";\r\n \r\n import FileListPanel from \"./components/FileListPanel\";\r\n import FileSelector from \"./components/FileSelector\";\r\n import { UploadConfigContext } from \"./context\";\r\n import { useNetworkType } from \"./hooks/useNetworkType\";\r\n \r\n-const UploadTask: React.FC = () => {\r\n+const { TabPane } = Tabs;\r\n+\r\n+interface UploadTaskProps {\r\n+  title?: string;\r\n+  accept?: string;\r\n+  multiple?: boolean;\r\n+  maxSize?: number;\r\n+  maxCount?: number;\r\n+}\r\n+\r\n+const UploadTask: React.FC<UploadTaskProps> = ({\r\n+  title = \"文件上传\",\r\n+  accept = \"*\",\r\n+  multiple = true,\r\n+  maxSize = 1024, // 默认最大1GB\r\n+  maxCount,\r\n+}) => {\r\n+  const [activeTab, setActiveTab] = useState<string>(\"uploading\");\r\n+  const [queuePaused, setQueuePaused] = useState<boolean>(false);\r\n   const [progress, setProgress] = useState<number>(100);\r\n   const [costSeconds, setCostSeconds] = useState<number>(0);\r\n \r\n   const { networkType, fileConcurrency, chunkConcurrency, chunkSize } =\r\n@@ -26,8 +56,27 @@\n     setProgress(progress);\r\n     if (typeof cost === \"number\") setCostSeconds(cost);\r\n   };\r\n \r\n+  // 暂停/恢复上传队列\r\n+  const toggleQueuePause = () => {\r\n+    if (queuePaused) {\r\n+      resumeQueue();\r\n+      setQueuePaused(false);\r\n+    } else {\r\n+      pauseQueue();\r\n+      setQueuePaused(true);\r\n+    }\r\n+  };\r\n+\r\n+  // 清空上传队列\r\n+  const handleClearQueue = () => {\r\n+    clearQueue();\r\n+  };\r\n+\r\n+  // 获取队列状态\r\n+  const queueStats = getQueueStats();\r\n+\r\n   if (!networkReady) {\r\n     return (\r\n       <div style={{ padding: 32, textAlign: \"center\" }}>\r\n         正在检测网络状态...\r\n@@ -35,24 +84,58 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <UploadConfigContext.Provider\r\n-      value={{\r\n-        networkType,\r\n-        fileConcurrency,\r\n-        chunkConcurrency,\r\n-        chunkSize,\r\n-        keepAfterUpload: false,\r\n-        removeDelayMs: 0,\r\n-      }}\r\n+    <Card\r\n+      title={title}\r\n+      extra={\r\n+        <Space>\r\n+          <Button\r\n+            icon={\r\n+              queuePaused ? <PlayCircleOutlined /> : <PauseCircleOutlined />\r\n+            }\r\n+            onClick={toggleQueuePause}\r\n+            type={queuePaused ? \"primary\" : \"default\"}\r\n+          >\r\n+            {queuePaused ? \"恢复上传\" : \"暂停上传\"}\r\n+          </Button>\r\n+          <Button\r\n+            icon={<ClearOutlined />}\r\n+            onClick={handleClearQueue}\r\n+            disabled={queueStats.size === 0}\r\n+          >\r\n+            清空队列\r\n+          </Button>\r\n+        </Space>\r\n+      }\r\n     >\r\n-      <h2>文件批量上传任务</h2>\r\n-      <FileSelector onProgress={handleProgress} />\r\n-      <div style={{ marginTop: 32 }}>\r\n-        <FileListPanel progress={progress} costSeconds={costSeconds} />\r\n-      </div>\r\n-    </UploadConfigContext.Provider>\r\n+      <UploadConfigContext.Provider\r\n+        value={{\r\n+          networkType,\r\n+          fileConcurrency,\r\n+          chunkConcurrency,\r\n+          chunkSize,\r\n+          keepAfterUpload: false,\r\n+          removeDelayMs: 0,\r\n+        }}\r\n+      >\r\n+        <FileSelector\r\n+          onProgress={handleProgress}\r\n+          accept={accept}\r\n+          multiple={multiple}\r\n+          maxSize={maxSize}\r\n+          maxCount={maxCount}\r\n+        />\r\n+        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r\n+          <TabPane tab=\"上传中\" key=\"uploading\">\r\n+            <FileListPanel showCompleted={false} />\r\n+          </TabPane>\r\n+          <TabPane tab=\"全部文件\" key=\"all\">\r\n+            <FileListPanel showCompleted={true} />\r\n+          </TabPane>\r\n+        </Tabs>\r\n+      </UploadConfigContext.Provider>\r\n+    </Card>\r\n   );\r\n };\r\n \r\n export default UploadTask;\r\n"
                },
                {
                    "date": 1748606771849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,11 @@\n-import { Button, Card, Space, Tabs } from \"antd\";\r\n-import {\r\n-  ClearOutlined,\r\n-  PauseCircleOutlined,\r\n-  PlayCircleOutlined,\r\n-} from \"@ant-design/icons\";\r\n-import React, { useState } from \"react\";\r\n-import {\r\n-  clearQueue,\r\n-  getQueueStats,\r\n-  pauseQueue,\r\n-  resumeQueue,\r\n-} from \"./services/uploadService\";\r\n+import { Button, Card, Space, Tabs } from 'antd';\r\n+import { ClearOutlined, PauseCircleOutlined, PlayCircleOutlined } from '@ant-design/icons';\r\n+import React, { useState } from 'react';\r\n+import { clearQueue, getQueueStats, pauseQueue, resumeQueue } from './services/uploadService';\r\n \r\n-import FileListPanel from \"./components/FileListPanel\";\r\n-import FileSelector from \"./components/FileSelector\";\r\n-import { UploadConfigContext } from \"./context\";\r\n-import { useNetworkType } from \"./hooks/useNetworkType\";\r\n+import FileListPanel from './components/FileListPanel';\r\n+import FileSelector from './components/FileSelector';\r\n \r\n const { TabPane } = Tabs;\r\n \r\n interface UploadTaskProps {\r\n@@ -27,37 +16,17 @@\n   maxCount?: number;\r\n }\r\n \r\n const UploadTask: React.FC<UploadTaskProps> = ({\r\n-  title = \"文件上传\",\r\n-  accept = \"*\",\r\n+  title = '文件上传',\r\n+  accept = '*',\r\n   multiple = true,\r\n   maxSize = 1024, // 默认最大1GB\r\n   maxCount,\r\n }) => {\r\n-  const [activeTab, setActiveTab] = useState<string>(\"uploading\");\r\n+  const [activeTab, setActiveTab] = useState<string>('uploading');\r\n   const [queuePaused, setQueuePaused] = useState<boolean>(false);\r\n-  const [progress, setProgress] = useState<number>(100);\r\n-  const [costSeconds, setCostSeconds] = useState<number>(0);\r\n \r\n-  const { networkType, fileConcurrency, chunkConcurrency, chunkSize } =\r\n-    useNetworkType();\r\n-  const networkReady =\r\n-    !!networkType &&\r\n-    fileConcurrency > 0 &&\r\n-    chunkConcurrency > 0 &&\r\n-    chunkSize > 0;\r\n-\r\n-  const handleProgress = (\r\n-    progress: number,\r\n-    current: number,\r\n-    total: number,\r\n-    cost?: number\r\n-  ) => {\r\n-    setProgress(progress);\r\n-    if (typeof cost === \"number\") setCostSeconds(cost);\r\n-  };\r\n-\r\n   // 暂停/恢复上传队列\r\n   const toggleQueuePause = () => {\r\n     if (queuePaused) {\r\n       resumeQueue();\r\n@@ -75,66 +44,45 @@\n \r\n   // 获取队列状态\r\n   const queueStats = getQueueStats();\r\n \r\n-  if (!networkReady) {\r\n-    return (\r\n-      <div style={{ padding: 32, textAlign: \"center\" }}>\r\n-        正在检测网络状态...\r\n-      </div>\r\n-    );\r\n-  }\r\n-\r\n   return (\r\n-    <Card\r\n+    <Card \r\n       title={title}\r\n       extra={\r\n         <Space>\r\n           <Button\r\n-            icon={\r\n-              queuePaused ? <PlayCircleOutlined /> : <PauseCircleOutlined />\r\n-            }\r\n+            icon={queuePaused ? <PlayCircleOutlined /> : <PauseCircleOutlined />}\r\n             onClick={toggleQueuePause}\r\n-            type={queuePaused ? \"primary\" : \"default\"}\r\n+            type={queuePaused ? 'primary' : 'default'}\r\n           >\r\n-            {queuePaused ? \"恢复上传\" : \"暂停上传\"}\r\n+            {queuePaused ? '恢复上传' : '暂停上传'}\r\n           </Button>\r\n-          <Button\r\n-            icon={<ClearOutlined />}\r\n+          <Button \r\n+            icon={<ClearOutlined />} \r\n             onClick={handleClearQueue}\r\n             disabled={queueStats.size === 0}\r\n           >\r\n             清空队列\r\n           </Button>\r\n         </Space>\r\n       }\r\n     >\r\n-      <UploadConfigContext.Provider\r\n-        value={{\r\n-          networkType,\r\n-          fileConcurrency,\r\n-          chunkConcurrency,\r\n-          chunkSize,\r\n-          keepAfterUpload: false,\r\n-          removeDelayMs: 0,\r\n-        }}\r\n-      >\r\n-        <FileSelector\r\n-          onProgress={handleProgress}\r\n-          accept={accept}\r\n-          multiple={multiple}\r\n-          maxSize={maxSize}\r\n-          maxCount={maxCount}\r\n-        />\r\n-        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r\n-          <TabPane tab=\"上传中\" key=\"uploading\">\r\n-            <FileListPanel showCompleted={false} />\r\n-          </TabPane>\r\n-          <TabPane tab=\"全部文件\" key=\"all\">\r\n-            <FileListPanel showCompleted={true} />\r\n-          </TabPane>\r\n-        </Tabs>\r\n-      </UploadConfigContext.Provider>\r\n+      <FileSelector \r\n+        accept={accept}\r\n+        multiple={multiple}\r\n+        maxSize={maxSize}\r\n+        maxCount={maxCount}\r\n+      />\r\n+      \r\n+      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r\n+        <TabPane tab=\"上传中\" key=\"uploading\">\r\n+          <FileListPanel showCompleted={false} />\r\n+        </TabPane>\r\n+        <TabPane tab=\"全部文件\" key=\"all\">\r\n+          <FileListPanel showCompleted={true} />\r\n+        </TabPane>\r\n+      </Tabs>\r\n     </Card>\r\n   );\r\n };\r\n \r\n"
                }
            ],
            "date": 1748432315252,
            "name": "Commit-0",
            "content": "import ImageUploader from \"./components/ImageUploader\";\r\nimport React from \"react\";\r\n\r\nconst UploadTask: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h2>图片批量上传任务</h2>\r\n      <ImageUploader />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadTask;\r\n"
        }
    ]
}