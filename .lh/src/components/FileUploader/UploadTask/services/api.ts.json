{
    "sourceFile": "src/components/FileUploader/UploadTask/services/api.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748440813781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748441249032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +1,174 @@\n // 文件上传相关 API 封装\r\n \r\n // 秒传验证API（需后端接口支持）\r\n export async function checkInstantUpload(\r\n-\t{\r\n-\t\tfileId,\r\n-\t\tmd5,\r\n-\t\tname,\r\n-\t\tsize,\r\n-\t\ttotal,\r\n-\t\tchunkMD5s,\r\n-\t}: {\r\n-\t\tfileId: string;\r\n-\t\tmd5: string;\r\n-\t\tname: string;\r\n-\t\tsize: number;\r\n-\t\ttotal: number;\r\n-\t\tchunkMD5s: string[];\r\n-\t},\r\n-\toptions?: {\r\n-\t\turl?: string;\r\n-\t\tapiPrefix?: string;\r\n-\t\theaders?: Record<string, string>;\r\n-\t\tparamsTransform?: (params: any, type: string) => any;\r\n-\t},\r\n+  {\r\n+    fileId,\r\n+    md5,\r\n+    name,\r\n+    size,\r\n+    total,\r\n+    chunkMD5s,\r\n+  }: {\r\n+    fileId: string;\r\n+    md5: string;\r\n+    name: string;\r\n+    size: number;\r\n+    total: number;\r\n+    chunkMD5s: string[];\r\n+  },\r\n+  options?: {\r\n+    url?: string;\r\n+    apiPrefix?: string;\r\n+    headers?: Record<string, string>;\r\n+    paramsTransform?: (params: any, type: string) => any;\r\n+  }\r\n ): Promise<{\r\n-\tuploaded: boolean;\r\n-\tchunkCheckResult: Array<{ index: number; exist: boolean; match: boolean }>;\r\n+  uploaded: boolean;\r\n+  chunkCheckResult: Array<{ index: number; exist: boolean; match: boolean }>;\r\n }> {\r\n-\tconst reqBody = options?.paramsTransform\r\n-\t\t? options.paramsTransform(\r\n-\t\t\t\t{\r\n-\t\t\t\t\tfile_id: fileId,\r\n-\t\t\t\t\tmd5,\r\n-\t\t\t\t\tname,\r\n-\t\t\t\t\tsize,\r\n-\t\t\t\t\ttotal,\r\n-\t\t\t\t\tchunk_md5s: chunkMD5s,\r\n-\t\t\t\t},\r\n-\t\t\t\t\"check\",\r\n-\t\t\t)\r\n-\t\t: {\r\n-\t\t\t\tfile_id: fileId,\r\n-\t\t\t\tmd5,\r\n-\t\t\t\tname,\r\n-\t\t\t\tsize,\r\n-\t\t\t\ttotal,\r\n-\t\t\t\tchunk_md5s: chunkMD5s,\r\n-\t\t\t};\r\n-\tconst prefix = options?.apiPrefix ?? \"\";\r\n-\tconst res = await fetch(options?.url || `${prefix}/file/instant`, {\r\n-\t\tmethod: \"POST\",\r\n-\t\theaders: {\r\n-\t\t\t\"Content-Type\": \"application/json\",\r\n-\t\t\t...(options?.headers || {}),\r\n-\t\t},\r\n-\t\tbody: JSON.stringify(reqBody),\r\n-\t});\r\n-\tconst data = await res.json();\r\n-\tif (data.code !== 200) throw new Error(data.message || \"秒传接口异常\");\r\n-\treturn data.data || { uploaded: false, chunkCheckResult: [] };\r\n+  const reqBody = options?.paramsTransform\r\n+    ? options.paramsTransform(\r\n+        {\r\n+          file_id: fileId,\r\n+          md5,\r\n+          name,\r\n+          size,\r\n+          total,\r\n+          chunk_md5s: chunkMD5s,\r\n+        },\r\n+        \"check\"\r\n+      )\r\n+    : {\r\n+        file_id: fileId,\r\n+        md5,\r\n+        name,\r\n+        size,\r\n+        total,\r\n+        chunk_md5s: chunkMD5s,\r\n+      };\r\n+  const prefix = options?.apiPrefix ?? \"\";\r\n+  const res = await fetch(options?.url || `${prefix}/file/instant`, {\r\n+    method: \"POST\",\r\n+    headers: {\r\n+      \"Content-Type\": \"application/json\",\r\n+      ...(options?.headers || {}),\r\n+    },\r\n+    body: JSON.stringify(reqBody),\r\n+  });\r\n+  const data = await res.json();\r\n+  if (data.code !== 200) throw new Error(data.message || \"秒传接口异常\");\r\n+  return data.data || { uploaded: false, chunkCheckResult: [] };\r\n }\r\n \r\n // 获取已上传分片\r\n export async function getFileStatus(\r\n-\t{\r\n-\t\tfileId,\r\n-\t\tmd5,\r\n-\t}: {\r\n-\t\tfileId: string;\r\n-\t\tmd5: string;\r\n-\t},\r\n-\toptions?: { apiPrefix?: string },\r\n+  {\r\n+    fileId,\r\n+    md5,\r\n+  }: {\r\n+    fileId: string;\r\n+    md5: string;\r\n+  },\r\n+  options?: { apiPrefix?: string }\r\n ) {\r\n-\tconst prefix = options?.apiPrefix ?? \"\";\r\n-\tconst res = await fetch(\r\n-\t\t`${prefix}/file/status?file_id=${encodeURIComponent(fileId)}&md5=${md5}`,\r\n-\t);\r\n-\tconst data = await res.json();\r\n-\tif (data.code !== 200) throw new Error(data.message || \"状态检测失败\");\r\n-\treturn data.data?.chunks || [];\r\n+  const prefix = options?.apiPrefix ?? \"\";\r\n+  const res = await fetch(\r\n+    `${prefix}/file/status?file_id=${encodeURIComponent(fileId)}&md5=${md5}`\r\n+  );\r\n+  const data = await res.json();\r\n+  if (data.code !== 200) throw new Error(data.message || \"状态检测失败\");\r\n+  return data.data?.chunks || [];\r\n }\r\n \r\n // 上传单个分片\r\n export async function uploadFileChunk(\r\n-\t{\r\n-\t\tfileId,\r\n-\t\tchunk_md5,\r\n-\t\tindex,\r\n-\t\tchunk,\r\n-\t\tname,\r\n-\t\ttotal,\r\n-\t}: {\r\n-\t\tfileId: string;\r\n-\t\tchunk_md5: string;\r\n-\t\tindex: number;\r\n-\t\tchunk: Blob;\r\n-\t\tname: string;\r\n-\t\ttotal: number;\r\n-\t},\r\n-\toptions?: {\r\n-\t\turl?: string;\r\n-\t\tapiPrefix?: string;\r\n-\t\theaders?: Record<string, string>;\r\n\\ No newline at end of file\n-\t\tparamsTransform?: (params: any, type: string) => any;\r\n-\t},\r\n+  {\r\n+    fileId,\r\n+    chunk_md5,\r\n+    index,\r\n+    chunk,\r\n+    name,\r\n+    total,\r\n+  }: {\r\n+    fileId: string;\r\n+    chunk_md5: string;\r\n+    index: number;\r\n+    chunk: Blob;\r\n+    name: string;\r\n+    total: number;\r\n+  },\r\n+  options?: {\r\n+    url?: string;\r\n+    apiPrefix?: string;\r\n+    headers?: Record<string, string>;\r\n+    paramsTransform?: (params: any, type: string) => any;\r\n+  }\r\n ) {\r\n-\tconst formData = new FormData();\r\n-\tlet reqParams = {\r\n-\t\tfile_id: fileId,\r\n-\t\tchunk_md5,\r\n-\t\tindex: String(index),\r\n-\t\tchunk,\r\n-\t\tname,\r\n-\t\ttotal: String(total),\r\n-\t};\r\n-\tif (options?.paramsTransform) {\r\n-\t\treqParams = options.paramsTransform(reqParams, \"upload\");\r\n-\t}\r\n-\tObject.entries(reqParams).forEach(([k, v]) => {\r\n-\t\tformData.append(k, v as any);\r\n-\t});\r\n-\tconst prefix = options?.apiPrefix ?? \"\";\r\n-\tconst res = await fetch(options?.url || `${prefix}/file/upload`, {\r\n-\t\tmethod: \"POST\",\r\n-\t\tbody: formData,\r\n-\t\theaders: options?.headers || {},\r\n-\t});\r\n-\tconst data = await res.json();\r\n-\tif (data.code !== 200) throw new Error(data.message || \"分片上传失败\");\r\n-\treturn data;\r\n+  const formData = new FormData();\r\n+  let reqParams = {\r\n+    file_id: fileId,\r\n+    chunk_md5,\r\n+    index: String(index),\r\n+    chunk,\r\n+    name,\r\n+    total: String(total),\r\n+  };\r\n+  if (options?.paramsTransform) {\r\n+    reqParams = options.paramsTransform(reqParams, \"upload\");\r\n+  }\r\n+  Object.entries(reqParams).forEach(([k, v]) => {\r\n+    formData.append(k, v as any);\r\n+  });\r\n+  const prefix = options?.apiPrefix ?? \"\";\r\n+  const res = await fetch(options?.url || `${prefix}/file/upload`, {\r\n+    method: \"POST\",\r\n+    body: formData,\r\n+    headers: options?.headers || {},\r\n+  });\r\n+  const data = await res.json();\r\n+  if (data.code !== 200) throw new Error(data.message || \"分片上传失败\");\r\n+  return data;\r\n }\r\n \r\n // 合并分片\r\n export async function mergeFile(\r\n-\t{\r\n-\t\tfileId,\r\n-\t\tmd5,\r\n-\t\tname,\r\n-\t\tsize,\r\n-\t\ttotal,\r\n-\t}: {\r\n-\t\tfileId: string;\r\n-\t\tmd5: string;\r\n-\t\tname: string;\r\n-\t\tsize: number;\r\n-\t\ttotal: number;\r\n-\t},\r\n-\toptions?: {\r\n-\t\turl?: string;\r\n-\t\tapiPrefix?: string;\r\n-\t\theaders?: Record<string, string>;\r\n-\t\tparamsTransform?: (params: any, type: string) => any;\r\n-\t},\r\n+  {\r\n+    fileId,\r\n+    md5,\r\n+    name,\r\n+    size,\r\n+    total,\r\n+  }: {\r\n+    fileId: string;\r\n+    md5: string;\r\n+    name: string;\r\n+    size: number;\r\n+    total: number;\r\n+  },\r\n+  options?: {\r\n+    url?: string;\r\n+    apiPrefix?: string;\r\n+    headers?: Record<string, string>;\r\n+    paramsTransform?: (params: any, type: string) => any;\r\n+  }\r\n ) {\r\n-\tconst reqBody = options?.paramsTransform\r\n-\t\t? options.paramsTransform(\r\n-\t\t\t\t{ file_id: fileId, md5, name, size, total },\r\n-\t\t\t\t\"merge\",\r\n-\t\t\t)\r\n-\t\t: { file_id: fileId, md5, name, size, total };\r\n-\tconst prefix = options?.apiPrefix ?? \"\";\r\n-\tconst res = await fetch(options?.url || `${prefix}/file/merge`, {\r\n-\t\tmethod: \"POST\",\r\n-\t\theaders: {\r\n-\t\t\t\"Content-Type\": \"application/json\",\r\n-\t\t\t...(options?.headers || {}),\r\n-\t\t},\r\n-\t\tbody: JSON.stringify(reqBody),\r\n-\t});\r\n-\tconst data = await res.json();\r\n-\tif (data.code !== 200) throw new Error(data.message || \"合并失败\");\r\n-\treturn data;\r\n-}\n+  const reqBody = options?.paramsTransform\r\n+    ? options.paramsTransform(\r\n+        { file_id: fileId, md5, name, size, total },\r\n+        \"merge\"\r\n+      )\r\n+    : { file_id: fileId, md5, name, size, total };\r\n+  const prefix = options?.apiPrefix ?? \"\";\r\n+  const res = await fetch(options?.url || `${prefix}/file/merge`, {\r\n+    method: \"POST\",\r\n+    headers: {\r\n+      \"Content-Type\": \"application/json\",\r\n+      ...(options?.headers || {}),\r\n+    },\r\n+    body: JSON.stringify(reqBody),\r\n+  });\r\n+  const data = await res.json();\r\n+  if (data.code !== 200) throw new Error(data.message || \"合并失败\");\r\n+  return data;\r\n+}\r\n"
                }
            ],
            "date": 1748440813781,
            "name": "Commit-0",
            "content": "// 文件上传相关 API 封装\r\n\r\n// 秒传验证API（需后端接口支持）\r\nexport async function checkInstantUpload(\r\n\t{\r\n\t\tfileId,\r\n\t\tmd5,\r\n\t\tname,\r\n\t\tsize,\r\n\t\ttotal,\r\n\t\tchunkMD5s,\r\n\t}: {\r\n\t\tfileId: string;\r\n\t\tmd5: string;\r\n\t\tname: string;\r\n\t\tsize: number;\r\n\t\ttotal: number;\r\n\t\tchunkMD5s: string[];\r\n\t},\r\n\toptions?: {\r\n\t\turl?: string;\r\n\t\tapiPrefix?: string;\r\n\t\theaders?: Record<string, string>;\r\n\t\tparamsTransform?: (params: any, type: string) => any;\r\n\t},\r\n): Promise<{\r\n\tuploaded: boolean;\r\n\tchunkCheckResult: Array<{ index: number; exist: boolean; match: boolean }>;\r\n}> {\r\n\tconst reqBody = options?.paramsTransform\r\n\t\t? options.paramsTransform(\r\n\t\t\t\t{\r\n\t\t\t\t\tfile_id: fileId,\r\n\t\t\t\t\tmd5,\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tsize,\r\n\t\t\t\t\ttotal,\r\n\t\t\t\t\tchunk_md5s: chunkMD5s,\r\n\t\t\t\t},\r\n\t\t\t\t\"check\",\r\n\t\t\t)\r\n\t\t: {\r\n\t\t\t\tfile_id: fileId,\r\n\t\t\t\tmd5,\r\n\t\t\t\tname,\r\n\t\t\t\tsize,\r\n\t\t\t\ttotal,\r\n\t\t\t\tchunk_md5s: chunkMD5s,\r\n\t\t\t};\r\n\tconst prefix = options?.apiPrefix ?? \"\";\r\n\tconst res = await fetch(options?.url || `${prefix}/file/instant`, {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t...(options?.headers || {}),\r\n\t\t},\r\n\t\tbody: JSON.stringify(reqBody),\r\n\t});\r\n\tconst data = await res.json();\r\n\tif (data.code !== 200) throw new Error(data.message || \"秒传接口异常\");\r\n\treturn data.data || { uploaded: false, chunkCheckResult: [] };\r\n}\r\n\r\n// 获取已上传分片\r\nexport async function getFileStatus(\r\n\t{\r\n\t\tfileId,\r\n\t\tmd5,\r\n\t}: {\r\n\t\tfileId: string;\r\n\t\tmd5: string;\r\n\t},\r\n\toptions?: { apiPrefix?: string },\r\n) {\r\n\tconst prefix = options?.apiPrefix ?? \"\";\r\n\tconst res = await fetch(\r\n\t\t`${prefix}/file/status?file_id=${encodeURIComponent(fileId)}&md5=${md5}`,\r\n\t);\r\n\tconst data = await res.json();\r\n\tif (data.code !== 200) throw new Error(data.message || \"状态检测失败\");\r\n\treturn data.data?.chunks || [];\r\n}\r\n\r\n// 上传单个分片\r\nexport async function uploadFileChunk(\r\n\t{\r\n\t\tfileId,\r\n\t\tchunk_md5,\r\n\t\tindex,\r\n\t\tchunk,\r\n\t\tname,\r\n\t\ttotal,\r\n\t}: {\r\n\t\tfileId: string;\r\n\t\tchunk_md5: string;\r\n\t\tindex: number;\r\n\t\tchunk: Blob;\r\n\t\tname: string;\r\n\t\ttotal: number;\r\n\t},\r\n\toptions?: {\r\n\t\turl?: string;\r\n\t\tapiPrefix?: string;\r\n\t\theaders?: Record<string, string>;\r\n\t\tparamsTransform?: (params: any, type: string) => any;\r\n\t},\r\n) {\r\n\tconst formData = new FormData();\r\n\tlet reqParams = {\r\n\t\tfile_id: fileId,\r\n\t\tchunk_md5,\r\n\t\tindex: String(index),\r\n\t\tchunk,\r\n\t\tname,\r\n\t\ttotal: String(total),\r\n\t};\r\n\tif (options?.paramsTransform) {\r\n\t\treqParams = options.paramsTransform(reqParams, \"upload\");\r\n\t}\r\n\tObject.entries(reqParams).forEach(([k, v]) => {\r\n\t\tformData.append(k, v as any);\r\n\t});\r\n\tconst prefix = options?.apiPrefix ?? \"\";\r\n\tconst res = await fetch(options?.url || `${prefix}/file/upload`, {\r\n\t\tmethod: \"POST\",\r\n\t\tbody: formData,\r\n\t\theaders: options?.headers || {},\r\n\t});\r\n\tconst data = await res.json();\r\n\tif (data.code !== 200) throw new Error(data.message || \"分片上传失败\");\r\n\treturn data;\r\n}\r\n\r\n// 合并分片\r\nexport async function mergeFile(\r\n\t{\r\n\t\tfileId,\r\n\t\tmd5,\r\n\t\tname,\r\n\t\tsize,\r\n\t\ttotal,\r\n\t}: {\r\n\t\tfileId: string;\r\n\t\tmd5: string;\r\n\t\tname: string;\r\n\t\tsize: number;\r\n\t\ttotal: number;\r\n\t},\r\n\toptions?: {\r\n\t\turl?: string;\r\n\t\tapiPrefix?: string;\r\n\t\theaders?: Record<string, string>;\r\n\t\tparamsTransform?: (params: any, type: string) => any;\r\n\t},\r\n) {\r\n\tconst reqBody = options?.paramsTransform\r\n\t\t? options.paramsTransform(\r\n\t\t\t\t{ file_id: fileId, md5, name, size, total },\r\n\t\t\t\t\"merge\",\r\n\t\t\t)\r\n\t\t: { file_id: fileId, md5, name, size, total };\r\n\tconst prefix = options?.apiPrefix ?? \"\";\r\n\tconst res = await fetch(options?.url || `${prefix}/file/merge`, {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t...(options?.headers || {}),\r\n\t\t},\r\n\t\tbody: JSON.stringify(reqBody),\r\n\t});\r\n\tconst data = await res.json();\r\n\tif (data.code !== 200) throw new Error(data.message || \"合并失败\");\r\n\treturn data;\r\n}"
        }
    ]
}