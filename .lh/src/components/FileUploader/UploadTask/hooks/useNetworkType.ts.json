{
    "sourceFile": "src/components/FileUploader/UploadTask/hooks/useNetworkType.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1748441163401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748441248998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,97 +8,97 @@\n  * @param onChange 可选，网络参数变化时的回调，返回 { networkType, concurrency, chunkSize }\r\n  * @returns { networkType, concurrency, chunkSize }\r\n  */\r\n export function useNetworkType(\r\n-\tonChange?: (params: {\r\n-\t\tnetworkType: string;\r\n-\t\tconcurrency: number;\r\n-\t\tchunkSize: number;\r\n-\t}) => void,\r\n+  onChange?: (params: {\r\n+    networkType: string;\r\n+    concurrency: number;\r\n+    chunkSize: number;\r\n+  }) => void\r\n ) {\r\n-\tconst network = useNetwork();\r\n-\tconst { rtt, online, effectiveType, type } = network;\r\n+  const network = useNetwork();\r\n+  const { rtt, online, effectiveType, type } = network;\r\n \r\n-\t/**\r\n-\t * 是否离线\r\n-\t */\r\n-\tconst isOffline =\r\n-\t\tonline === false ||\r\n-\t\t(typeof window !== \"undefined\" &&\r\n-\t\t\ttypeof window.navigator !== \"undefined\" &&\r\n-\t\t\twindow.navigator.onLine === false);\r\n+  /**\r\n+   * 是否离线\r\n+   */\r\n+  const isOffline =\r\n+    online === false ||\r\n+    (typeof window !== \"undefined\" &&\r\n+      typeof window.navigator !== \"undefined\" &&\r\n+      window.navigator.onLine === false);\r\n \r\n-\t/**\r\n-\t * 动态并发数\r\n-\t * - 网络越好并发越高，离线为0\r\n-\t */\r\n-\tconst concurrency = useMemo(() => {\r\n-\t\tif (isOffline) return 0;\r\n-\t\tif (typeof rtt === \"number\" && rtt > 0) {\r\n-\t\t\tif (rtt <= 50) return 6;\r\n-\t\t\tif (rtt <= 100) return 4;\r\n-\t\t\tif (rtt <= 200) return 3;\r\n-\t\t\tif (rtt <= 500) return 2;\r\n-\t\t\tif (rtt <= 1000) return 1;\r\n-\t\t\treturn 1;\r\n-\t\t}\r\n-\t\tif (type === \"wifi\") {\r\n-\t\t\tif (effectiveType === \"4g\") return 4;\r\n-\t\t\tif (effectiveType === \"3g\") return 3;\r\n-\t\t\treturn 2;\r\n-\t\t}\r\n-\t\tif (type === \"ethernet\") return 4;\r\n-\t\tif (effectiveType === \"4g\") return 3;\r\n-\t\tif (effectiveType === \"3g\") return 2;\r\n-\t\tif (effectiveType === \"2g\") return 1;\r\n-\t\tif (effectiveType === \"slow-2g\") return 1;\r\n-\t\treturn 2;\r\n-\t}, [rtt, isOffline, effectiveType, type]);\r\n+  /**\r\n+   * 动态并发数\r\n+   * - 网络越好并发越高，离线为0\r\n+   */\r\n+  const concurrency = useMemo(() => {\r\n+    if (isOffline) return 0;\r\n+    if (typeof rtt === \"number\" && rtt > 0) {\r\n+      if (rtt <= 50) return 6;\r\n+      if (rtt <= 100) return 4;\r\n+      if (rtt <= 200) return 3;\r\n+      if (rtt <= 500) return 2;\r\n+      if (rtt <= 1000) return 1;\r\n+      return 1;\r\n+    }\r\n+    if (type === \"wifi\") {\r\n+      if (effectiveType === \"4g\") return 4;\r\n+      if (effectiveType === \"3g\") return 3;\r\n+      return 2;\r\n+    }\r\n+    if (type === \"ethernet\") return 4;\r\n+    if (effectiveType === \"4g\") return 3;\r\n+    if (effectiveType === \"3g\") return 2;\r\n+    if (effectiveType === \"2g\") return 1;\r\n+    if (effectiveType === \"slow-2g\") return 1;\r\n+    return 2;\r\n+  }, [rtt, isOffline, effectiveType, type]);\r\n \r\n-\t/**\r\n-\t * 动态切片大小（字节）\r\n-\t * - 网络越好切片越大，网络差切片越小\r\n-\t */\r\n-\tconst chunkSize = useMemo(() => {\r\n-\t\tif (isOffline) return 512 * 1024;\r\n-\t\tif (typeof rtt === \"number\" && rtt > 0) {\r\n\\ No newline at end of file\n-\t\t\tif (rtt <= 50) return 8 * 1024 * 1024;\r\n-\t\t\tif (rtt <= 100) return 4 * 1024 * 1024;\r\n-\t\t\tif (rtt <= 200) return 2 * 1024 * 1024;\r\n-\t\t\tif (rtt <= 500) return 1 * 1024 * 1024;\r\n-\t\t\tif (rtt <= 1000) return 512 * 1024;\r\n-\t\t\treturn 256 * 1024;\r\n-\t\t}\r\n-\t\tif (type === \"wifi\" || type === \"ethernet\") return 4 * 1024 * 1024;\r\n-\t\tif (effectiveType === \"4g\") return 2 * 1024 * 1024;\r\n-\t\tif (effectiveType === \"3g\") return 1 * 1024 * 1024;\r\n-\t\tif (effectiveType === \"2g\" || effectiveType === \"slow-2g\")\r\n-\t\t\treturn 256 * 1024;\r\n-\t\treturn 1 * 1024 * 1024;\r\n-\t}, [rtt, isOffline, effectiveType, type]);\r\n+  /**\r\n+   * 动态切片大小（字节）\r\n+   * - 网络越好切片越大，网络差切片越小\r\n+   */\r\n+  const chunkSize = useMemo(() => {\r\n+    if (isOffline) return 512 * 1024;\r\n+    if (typeof rtt === \"number\" && rtt > 0) {\r\n+      if (rtt <= 50) return 8 * 1024 * 1024;\r\n+      if (rtt <= 100) return 4 * 1024 * 1024;\r\n+      if (rtt <= 200) return 2 * 1024 * 1024;\r\n+      if (rtt <= 500) return 1 * 1024 * 1024;\r\n+      if (rtt <= 1000) return 512 * 1024;\r\n+      return 256 * 1024;\r\n+    }\r\n+    if (type === \"wifi\" || type === \"ethernet\") return 4 * 1024 * 1024;\r\n+    if (effectiveType === \"4g\") return 2 * 1024 * 1024;\r\n+    if (effectiveType === \"3g\") return 1 * 1024 * 1024;\r\n+    if (effectiveType === \"2g\" || effectiveType === \"slow-2g\")\r\n+      return 256 * 1024;\r\n+    return 1 * 1024 * 1024;\r\n+  }, [rtt, isOffline, effectiveType, type]);\r\n \r\n-\t/**\r\n-\t * 网络类型字符串\r\n-\t */\r\n-\tconst networkType = isOffline\r\n-\t\t? \"offline\"\r\n-\t\t: effectiveType || type || \"unknown\";\r\n+  /**\r\n+   * 网络类型字符串\r\n+   */\r\n+  const networkType = isOffline\r\n+    ? \"offline\"\r\n+    : effectiveType || type || \"unknown\";\r\n \r\n-\t// 变化时触发回调\r\n-\tconst prev = useRef<{\r\n-\t\tnetworkType: string;\r\n-\t\tconcurrency: number;\r\n-\t\tchunkSize: number;\r\n-\t}>();\r\n-\tuseEffect(() => {\r\n-\t\tif (\r\n-\t\t\tprev.current?.networkType !== networkType ||\r\n-\t\t\tprev.current?.concurrency !== concurrency ||\r\n-\t\t\tprev.current?.chunkSize !== chunkSize\r\n-\t\t) {\r\n-\t\t\tonChange?.({ networkType, concurrency, chunkSize });\r\n-\t\t\tprev.current = { networkType, concurrency, chunkSize };\r\n-\t\t}\r\n-\t}, [networkType, concurrency, chunkSize, onChange]);\r\n+  // 变化时触发回调\r\n+  const prev = useRef<{\r\n+    networkType: string;\r\n+    concurrency: number;\r\n+    chunkSize: number;\r\n+  }>();\r\n+  useEffect(() => {\r\n+    if (\r\n+      prev.current?.networkType !== networkType ||\r\n+      prev.current?.concurrency !== concurrency ||\r\n+      prev.current?.chunkSize !== chunkSize\r\n+    ) {\r\n+      onChange?.({ networkType, concurrency, chunkSize });\r\n+      prev.current = { networkType, concurrency, chunkSize };\r\n+    }\r\n+  }, [networkType, concurrency, chunkSize, onChange]);\r\n \r\n-\treturn { networkType, concurrency, chunkSize };\r\n-}\n+  return { networkType, concurrency, chunkSize };\r\n+}\r\n"
                }
            ],
            "date": 1748441163401,
            "name": "Commit-0",
            "content": "import { useEffect, useMemo, useRef } from \"react\";\r\n\r\nimport { useNetwork } from \"ahooks\";\r\n\r\n/**\r\n * 网络类型与自适应上传参数 Hook\r\n * 根据网络状况动态计算并发数和切片大小，支持回调通知。\r\n * @param onChange 可选，网络参数变化时的回调，返回 { networkType, concurrency, chunkSize }\r\n * @returns { networkType, concurrency, chunkSize }\r\n */\r\nexport function useNetworkType(\r\n\tonChange?: (params: {\r\n\t\tnetworkType: string;\r\n\t\tconcurrency: number;\r\n\t\tchunkSize: number;\r\n\t}) => void,\r\n) {\r\n\tconst network = useNetwork();\r\n\tconst { rtt, online, effectiveType, type } = network;\r\n\r\n\t/**\r\n\t * 是否离线\r\n\t */\r\n\tconst isOffline =\r\n\t\tonline === false ||\r\n\t\t(typeof window !== \"undefined\" &&\r\n\t\t\ttypeof window.navigator !== \"undefined\" &&\r\n\t\t\twindow.navigator.onLine === false);\r\n\r\n\t/**\r\n\t * 动态并发数\r\n\t * - 网络越好并发越高，离线为0\r\n\t */\r\n\tconst concurrency = useMemo(() => {\r\n\t\tif (isOffline) return 0;\r\n\t\tif (typeof rtt === \"number\" && rtt > 0) {\r\n\t\t\tif (rtt <= 50) return 6;\r\n\t\t\tif (rtt <= 100) return 4;\r\n\t\t\tif (rtt <= 200) return 3;\r\n\t\t\tif (rtt <= 500) return 2;\r\n\t\t\tif (rtt <= 1000) return 1;\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\tif (type === \"wifi\") {\r\n\t\t\tif (effectiveType === \"4g\") return 4;\r\n\t\t\tif (effectiveType === \"3g\") return 3;\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\tif (type === \"ethernet\") return 4;\r\n\t\tif (effectiveType === \"4g\") return 3;\r\n\t\tif (effectiveType === \"3g\") return 2;\r\n\t\tif (effectiveType === \"2g\") return 1;\r\n\t\tif (effectiveType === \"slow-2g\") return 1;\r\n\t\treturn 2;\r\n\t}, [rtt, isOffline, effectiveType, type]);\r\n\r\n\t/**\r\n\t * 动态切片大小（字节）\r\n\t * - 网络越好切片越大，网络差切片越小\r\n\t */\r\n\tconst chunkSize = useMemo(() => {\r\n\t\tif (isOffline) return 512 * 1024;\r\n\t\tif (typeof rtt === \"number\" && rtt > 0) {\r\n\t\t\tif (rtt <= 50) return 8 * 1024 * 1024;\r\n\t\t\tif (rtt <= 100) return 4 * 1024 * 1024;\r\n\t\t\tif (rtt <= 200) return 2 * 1024 * 1024;\r\n\t\t\tif (rtt <= 500) return 1 * 1024 * 1024;\r\n\t\t\tif (rtt <= 1000) return 512 * 1024;\r\n\t\t\treturn 256 * 1024;\r\n\t\t}\r\n\t\tif (type === \"wifi\" || type === \"ethernet\") return 4 * 1024 * 1024;\r\n\t\tif (effectiveType === \"4g\") return 2 * 1024 * 1024;\r\n\t\tif (effectiveType === \"3g\") return 1 * 1024 * 1024;\r\n\t\tif (effectiveType === \"2g\" || effectiveType === \"slow-2g\")\r\n\t\t\treturn 256 * 1024;\r\n\t\treturn 1 * 1024 * 1024;\r\n\t}, [rtt, isOffline, effectiveType, type]);\r\n\r\n\t/**\r\n\t * 网络类型字符串\r\n\t */\r\n\tconst networkType = isOffline\r\n\t\t? \"offline\"\r\n\t\t: effectiveType || type || \"unknown\";\r\n\r\n\t// 变化时触发回调\r\n\tconst prev = useRef<{\r\n\t\tnetworkType: string;\r\n\t\tconcurrency: number;\r\n\t\tchunkSize: number;\r\n\t}>();\r\n\tuseEffect(() => {\r\n\t\tif (\r\n\t\t\tprev.current?.networkType !== networkType ||\r\n\t\t\tprev.current?.concurrency !== concurrency ||\r\n\t\t\tprev.current?.chunkSize !== chunkSize\r\n\t\t) {\r\n\t\t\tonChange?.({ networkType, concurrency, chunkSize });\r\n\t\t\tprev.current = { networkType, concurrency, chunkSize };\r\n\t\t}\r\n\t}, [networkType, concurrency, chunkSize, onChange]);\r\n\r\n\treturn { networkType, concurrency, chunkSize };\r\n}"
        }
    ]
}